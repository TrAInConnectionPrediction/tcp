# In order for this to work please set the BUILDKIT env variable using "export DOCKER_BUILDKIT=1"
# To test the container locally you can run:
# docker build -f webserver/Dockerfile.webserver . -t webserver
# docker run -p 5000:5000 -v $(pwd)/config_docker.py:/mnt/config/config.py-v $(pwd)/cache:/usr/src/app/cache webserver
# Though I would suggest that you have a seperate config for docker
# If not so replace -v $(pwd)/config_docker.py:/mnt/config/config.py with -v $(pwd)/config.py:/mnt/config/config.py

# This build file is from https://www.rockyourcode.com/create-a-multi-stage-docker-build-for-python-flask-and-postgres/

## Base image
FROM python:3.9 AS compile-image

## Install dependencies (libgeos in order for basemap to work)
RUN apt-get update
RUN apt-get install -y gcc libproj-dev proj-data proj-bin
RUN apt-get install -y libgeos-dev

## Virtualenv
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

## Add and install requirements
RUN pip install --upgrade pip && pip install pip-tools
RUN pip install --no-binary shapely shapely
RUN pip install numpy
COPY ./webserver/requirements.txt requirements.txt
RUN pip install -r requirements.txt


# Complie website
FROM node:14-alpine as node-image
WORKDIR /app
COPY ./webserver/website/package*.json ./
RUN npm install
COPY ./webserver/website/ .
RUN npm run build

## Build-image
FROM python:3.9 AS runtime-image

## Install libgeos
# TODO: Copy libgeos from build image
RUN apt-get update
RUN apt-get install -y gcc build-essential libproj-dev proj-data proj-bin
RUN apt-get install -y libgeos-dev

## Virtualenv
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

## Copy Python dependencies from build image
COPY --from=compile-image /opt/venv /opt/venv

## set working directory
WORKDIR /usr/src/app

## Add User (a security measure)
# We have to set a static user id, so that the user can read the files in virtual volumes
# We use system accounts, but it's just symbolic
RUN addgroup --system --gid 420 tcp && adduser --system --no-create-home --uid 420 --gid 420 tcp

## Add webserver and librays
COPY ./webserver/ /usr/src/app/webserver/
COPY ./helpers/ /usr/src/app/helpers/
COPY ./database/ /usr/src/app/database/
COPY ./data_analysis/ /usr/src/app/data_analysis
COPY ./webserverconfig.py /usr/src/app/webserverconfig.py

## Copy website
COPY --from=node-image /app/dist /usr/src/app/webserver/website/dist/

## Switch to non-root user
# for some reason doing this before the copy results in weird permissions # && chmod -R 775 /usr/src/app/
RUN chown -R tcp:tcp /usr/src/app/
USER tcp

## Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PATH="/opt/venv/bin:$PATH"
ENV MPLCONFIGDIR="/usr/src/app/cache"

EXPOSE 5000

CMD ["gunicorn","-b 0.0.0.0:5000", "webserver:create_app()", "-t 100"]
